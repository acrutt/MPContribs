#!/usr/bin/env python

import sys
import os
import argparse
import logging
from pymatgen.matproj.rest import MPRester

#ENDPOINT, API_KEY = "https://www.materialsproject.org/rest", os.environ.get('MAPI_KEY')
ENDPOINT, API_KEY = "http://localhost:8000/rest", os.environ.get('MAPI_KEY_LOC')

def info(args):
    with MPRester(API_KEY, endpoint=ENDPOINT) as m:
        infos = {}
        for contrib in m.query_contribs():
            mid, cid = contrib['mp_cat_id'], str(contrib['contribution_id'])
            if mid not in infos: infos[mid] = [cid]
            else: infos[mid].append(cid)
        for k,v in infos.iteritems():
            if args.mp_cat_ids is None or \
               (args.mp_cat_ids is not None and k in args.mp_cat_ids):
                print '{}: {}'.format(k, ' '.join(v))

def submit(args):
    with MPRester(API_KEY, endpoint=ENDPOINT) as m:
        print m.submit_mpfile(args.mpfile, args.cids)

def delete(args):
    with MPRester(API_KEY, endpoint=ENDPOINT) as m:
        print '{} contributions deleted.'.format(
            m.delete_contribs(args.cids)
        )

def collab_add(args):
    pass

def collab_remove(args):
    pass

def collab_primary(args):
    pass

def main():
    parser = argparse.ArgumentParser(
        description="""mgc is a convenience script using the Materials Project's
        contribution framework MPContribs to submit user-contributed data to the
        MP for dissemination to MP users. For help on sub-commands:
        `mgc sub-command -h`.""",
        epilog='Author: Patrick Huck <phuck@lbl.gov> (LBNL)'
    )
    subparsers = parser.add_subparsers()

    parser_info = subparsers.add_parser(
        'info', help="""list contributions pertaining to the contributor"""
    ) # TODO: include descriptions in contribution list?
    parser_info.add_argument(
        '-m', '--mp_cat_ids', type=str, nargs='+',
        help="""reduce output to specific MP category IDs"""
    )
    parser_info.set_defaults(func=info)

    parser_submit = subparsers.add_parser(
        'submit', help="""submit a MPFile containing the contribution data"""
    )
    parser_submit.add_argument('mpfile', type=str, help='MPFile to submit')
    parser_submit.add_argument(
        '--cids', type=int, nargs='+',
        help="""list of contribution IDs to be updated w/ this MPFile"""
    )
    parser_submit.set_defaults(func=submit)

    parser_delete = subparsers.add_parser(
        'delete', help="""delete contributions belonging to the contributor"""
    )
    parser_delete.add_argument(
        'cids', type=int, nargs='+',
        help="""list of contribution IDs to be deleted"""
    )
    parser_delete.set_defaults(func=delete)

    parser_collab = subparsers.add_parser(
        'collab', help="""maintain list of collaborators for contributions"""
    )
    collab_subparsers = parser_collab.add_subparsers()
    collab_subparsers_add = collab_subparsers.add_parser(
        'add', help="""add collaborators to contributions""",
        description="Example: `mgc collab add p.huck a.jain --to 24 55 67`"
    )
    collab_subparsers_add.add_argument(
        'collaborators', type=str, nargs='+',
        help="""list of collaborators in the format `FirstNameInitial.LastName`
        (case insensitive)"""
    )
    collab_subparsers_add.add_argument(
        '--to', type=int, nargs='+',
        help="""list of contribution IDs to which to add collaborators.
        Collaborators will be added to ALL contributions if `--to` is omitted!"""
    )
    collab_subparsers_add.set_defaults(func=collab_add)
    collab_subparsers_remove = collab_subparsers.add_parser(
        'remove', help="""remove collaborators from contributions""",
        description="Example: `mgc collab remove p.huck a.jain --from 24 55 67`"
    )
    collab_subparsers_remove.add_argument(
        'collaborators', type=str, nargs='+',
        help="""list of collaborators in the format `FirstNameInitial.LastName`
        (case insensitive)"""
    )
    collab_subparsers_remove.add_argument(
        '--from', type=int, nargs='+',
        help="""list of contribution IDs from which to remove collaborators.
        Collaborators will be removed from ALL contributions if `--from` is omitted!"""
    )
    collab_subparsers_remove.set_defaults(func=collab_remove)
    collab_subparsers_primary = collab_subparsers.add_parser(
        'primary', help="""set primary contact for contributions""",
        description="Example: `mgc collab primary p.huck --for 24 55 67`"
    )
    collab_subparsers_primary.add_argument(
        'collaborator', type=str, help="""collaborator in the format
        `FirstNameInitial.LastName` (case insensitive)"""
    )
    collab_subparsers_primary.add_argument(
        '--for', type=int, nargs='+',
        help="""list of contribution IDs for which to set the primary collaborators.
        The primary collaborator will be set for ALL contributions if `--for` is omitted!"""
    )
    collab_subparsers_primary.set_defaults(func=collab_primary)

    args = parser.parse_args(None if len(sys.argv) > 1 else ['--help'])
    args.func(args)

if __name__ == "__main__":
    main()
