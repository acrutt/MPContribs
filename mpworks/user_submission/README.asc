http://the-huck.com[Patrick Huck] (https://github.com/tschaume[tschaume]), Sep-08-2014 +
*Under Development*

:toc:
:toc-placement: manual

[options="compact"]
toc::[]

user-contributed data submissions
---------------------------------

objective
~~~~~~~~~

The objective of the link:user_submission_test.py[`user_submission_test.py`]
script is to develop a test scenario for the submission of a multitude of
possible user data formats and their resulting JSON representation using
http://pandas.pydata.org['Pandas'].  'Pandas' already handles a variety of
different data table formats with index columns and header rows, and their
translation into the according python objects. The respective common language
is well established and allows for the convenient
http://pandas.pydata.org/pandas-docs/dev/io.html#csv-text-files[import of data
from csv] and other sources via a few options as well as the definition of a
set of
http://pandas.pydata.org/pandas-docs/dev/io.html#writing-json[orientations] and
http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_dict.html[out-types]
to translate data objects to JSON via `to_json()` or to python dicts via `to_dict()`.
http://pandas.pydata.org/pandas-docs/stable/visualization.html[Default
plotting] of the data objects with sensible options are also provided. Basicly,
'Pandas' represents simple one-column, possibly indexed data tables via
`Series` and all else (i.e. even multi-indexed data) via `DataFrame` objects.
This considerably facilitates the programmatic submission of data using the
Materials Project's REST API for user and developer. The approach of using
'Pandas' for MP user data submissions would not only guarantee a common
language with already plenty of existing documentation but would also leave the
specific data table formats under the user's control.

user submissions in current MP infrastructure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[options="compact"]
- one csv for each 'snl_group_id'
- each project has list of 'snl_group_id' based data submissions, hook into 'projects' key in SNL
- submission of any general final user data not customized MP-based User Tasks

authors & publications
~~~~~~~~~~~~~~~~~~~~~~

[options="compact"]
- project-wide bibtex file to manage publications,
- already includes designated fields commonly required for references
- parsed using already existing pybtex with bibtex-key as identifier
- restrict submitters to usernames, others listed in publications
- usernames can be 'afterburned' into real names (frontend)
- respective bibtex-file is imported separately and bibtex-keys resolved
  dynamically (frontend).
- data sections can also be annotated with bibtex-keys

data submission format
~~~~~~~~~~~~~~~~~~~~~~

CSV:: Commonly used - ubiquitous! Easy to produce and parse. Well suited for
tabular data.  Doesn't handle hierarchical data or free-form text well, but
this should be manageable.

link:input.csv[`input.csv`] is a csv-formatted file with a collection of
possible user data formats separated in nested sections by multiples of `>`.
Each of the sections is separately read into 'Pandas' objects using
`read_csv()` with sensible options.  Currently, the file contains the following
sections.

[options="compact"]
- implement global/overall and section-wise general meta-data, i.e. support for
  optional name-restricted subsections. If not subsection, parse as 'data'.
- In general for all sections, the first column does not need to be unique. really?
- use colon as separator for 'general' and 'plot' (sub-)sections (simple list
  of key-value pairs), 'data' sections are parsed with comma as delimiter.
- 'plot' subsection: specify a plot and its options. only columns to plot for
  now (by header). only support keyword arguments allowed by df.plot()
- separate header entry in general section is not necessary. Pandas already
  provides that b/c it is part of the data -> user just labels the data! ->
  possibly always require header row in data section!?
  -> define column header like desired for axis labels (for now)
- a general section with properties, settings and defaults. The MP might
  require certain unique row names in this section (snl-id, mp-id, xtal-name
  etc.).
- a section with a simple list of annotated numbers including units. The number
  can have multiple columns to provide info on the respective conditions under
  which the number was generated.
- The other two sections are examples for the submission of an elastic tensor
  and frequency-dependent dielectric constants (see below).

data import
~~~~~~~~~~~

parser
^^^^^^

list of 1-1-mappings always imported as an indexed `Series` object.  

plotter
^^^^^^^

features yet to be implemented
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

[options="compact"]
- define separator in (sub-)section title line
- support multiple plots on same data, implement/check df.plot() options
- comments: no special line breaks, allow for wrapping
- special syntax for multi-index tables, args in DataFrame.read_csv()?
- support optional indentation
- input/data validation and error handling
- parsing authors/publications based on project-wide bibtex-file
- use section names as keywords to facilitate search feature

JSON-formatted data for MongoDB
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Running link:user_submission_test.py[`user_submission_test.py`] over
link:input.csv[`input.csv`], pretty-prints the imported data using 'Pandas'
defaults and outputs a JSON representation of how the data would be saved in
MP's database internally (-> link:output.json[`output.json`]).

Band Gaps
^^^^^^^^^

CSV Input
+++++++++

no special plot subsection due to single float column

Pandas Pretty-Print
+++++++++++++++++++

-------------
              name      type functional          method     value unit
0         band gap  indirect    GLLB-SC       Kohn-Sham  6.887038   eV
1         band gap    direct    GLLB-SC       Kohn-Sham  6.886986   eV
2         band gap  indirect    GLLB-SC  quasi-particle  9.315470   eV
3         band gap    direct    GLLB-SC  quasi-particle  9.315419   eV
4  deriv. discont.       NaN    GLLB-SC             NaN  2.428330   eV
-------------

JSON Representation
+++++++++++++++++++

-------------
{
  ...
  "Band Gaps": [
    {
      "functional": "GLLB-SC", 
      "method": "Kohn-Sham", 
      "name": "band gap", 
      "type": "indirect", 
      "unit": "eV", 
      "value": 6.887038
    }, 
    ...
  ], 
  ...
}
-------------

Plot
++++

image:png/fig1.png[width="400px"]

Elastic Tensor
^^^^^^^^^^^^^^

Pandas Pretty-Print
+++++++++++++++++++

----------------
                Experimental  Theoretical unit            reference
Matrix Element                                                     
c11                    287.0        284.7  GPa  PestkaScottLePage11
c22                    302.1        299.5  GPa                  NaN
c33                    266.1        248.1  GPa  PestkaScottLePage11
c44                    117.2        100.9  GPa                  NaN
c55                     80.2         81.5  GPa                  NaN
c66                     85.6         83.7  GPa                  NaN
c23                    122.0        122.7  GPa  PestkaScottLePage11
c12                    128.7        133.3  GPa                  NaN
c13                    116.3        115.4  GPa                  NaN
----------------

JSON Representation
+++++++++++++++++++

----------------
{
  ...
  "Elastic Tensor": {
    "Experimental": {
      "c11": 287.0, 
      "c12": 128.7, 
      ...
    }, 
    "Theoretical": {
      "c11": 284.7, 
      "c12": 133.3, 
      ...
    }, 
    "reference": {
      "c11": "PestkaScottLePage11", 
      "c12": null, 
      ...
    }, 
    "unit": {
      "c11": "GPa", 
      ...
    }
  }, 
  ...
}
----------------

Plot
++++

image:png/fig2.png[width="400px"]

Dielectric Constants
^^^^^^^^^^^^^^^^^^^^

CSV Input
+++++++++

no plot subsection -> overlay all y~i~ vs x in plot

Pandas Pretty-Print
+++++++++++++++++++

----------------
     freq    real    imag
0     0.0  2.0065  0.0000
1     0.5  2.0073  0.0000
2     1.0  2.0097  0.0000
3     1.5  2.0139  0.0000
4     2.0  2.0197  0.0000
5     2.5  2.0273  0.0000
6     3.0  2.0368  0.0000
...
----------------

JSON Representation
+++++++++++++++++++

----------------
{
  ...
  "Dielectric Constant": [
    [ 0.0, 2.0065, 0.0 ], 
    [ 0.5, 2.0073, 0.0 ], 
    [ 1.0, 2.0097, 0.0 ], 
    [ 1.5, 2.0139, 0.0 ], 
    [ 2.0, 2.0197, 0.0 ], 
    ...
  ], 
  ...
}
----------------

Plot
++++

image:png/fig3.png[width="400px"]

// vim: set syntax=asciidoc:
