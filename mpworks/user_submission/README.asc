http://the-huck.com[Patrick Huck] (https://github.com/tschaume[tschaume]), Aug-28-2014 +
*Under Development*

user-contributed data submissions
---------------------------------

.Notes/TODO's addressing NREL comments (work in progress)
- one csv for each 'snl_group_id'
- better explain DataFrame object (index, header, orientation), not constrained
  to numerical data, DataFrames are not single columns in a table but the whole
  table! -> not necessary to (extensively) custom-wrap DataFrame
- separate header entry in general section is not necessary. Pandas already
  provides that b/c it is part of the data -> user just labels the data! ->
  possibly always require header row in data section!?
  -> define column header like desired for axis labels (for now)
- why blank lines in csv area? comments are ignored in Pandas anyway
- use colon as separator for 'general' and 'plot' (sub-)sections (simple list
  of key-value pairs), 'data' sections are parsed with comma as delimiter.
- 'plot' subsection: specify a plot and its options. only columns to plot for
  now (by header). only support keyword arguments allowed by df.plot()
  -> support multiple plots on same data, implement first set of options
- extend comment on project-wide bibtex file to manage publications, esp.
  already includes doi's in designated field (dto authors), parsed using already
  existing pybtex -> write example 'afterburner' on csv input
  -> restrict submitters (authors) to usernames, others listed in publications
    (usernames can be 'afterburned' into real names)
- implement global/overall and section-wise general meta-data, i.e. support for
  optional name-restricted subsections. If not subsection, parse as 'data'.
- purpose of keywords is to facilitate search!? Would be very help-/powerful ->
  use section names as keywords
- comments: no special line breaks, allow for wrapping
- special syntax for multi-index tables, args in DataFrame.read_csv()?
- indentation supported but not required

objective
~~~~~~~~~

The objective of the link:user_submission_test.py[`user_submission_test.py`]
script is to develop a test scenario for the submission of a multitude of
possible user data formats and their resulting JSON representation using
http://pandas.pydata.org['Pandas'].  'Pandas' already handles a variety of
different data table formats with index columns and header rows, and their
translation into the according python objects. The respective common language
is well established and allows for the convenient
http://pandas.pydata.org/pandas-docs/dev/io.html#csv-text-files[import of data
from csv] and other sources via a few options as well as the definition of a
set of
http://pandas.pydata.org/pandas-docs/dev/io.html#writing-json[orientations] to
translate data objects to JSON via `to_json()`.
http://pandas.pydata.org/pandas-docs/stable/visualization.html[Default
plotting] of the data objects with sensible options are also provided. Basicly,
'Pandas' represents simple one-column, possibly indexed data tables via
`Series` and all else (i.e. even multi-indexed data) via `DataFrame` objects.
This considerably facilitates the programmatic submission of data using the
Materials Project's REST API for user and developer. The approach of using
'Pandas' for MP user data submissions would not only guarantee a common
language with already plenty of existing documentation but would also leave the
specific data table formats under the user's control.

test cases
~~~~~~~~~~

link:input.csv[`input.csv`] is a csv-formatted file with a collection of
possible user data formats separated in nested sections by multiples of `>`.
Each of the sections is separately read into 'Pandas' objects using
`read_csv()` with sensible options.  Currently, the file contains the following
sections.

[options="compact"]
- a general section with properties, settings and defaults. This would be a
  list of 1-1-mappings imported as an indexed `Series` object. The MP might
  require certain unique row names in this section (mp-id, xtal-namem,
  authors etc.). Authors would be listed using their usernames and
  references in general using a unique bibtex-key. The respective bibtex-file
  is imported separately and bibtex-keys resolved dynamically. All following
  data sections can also be annotated to the user's liking with bibtex-keys for
  references and usernames for authors.
- a section with a simple list of annotated numbers including units. The number
  can have multiple columns to provide info on the respective conditions under
  which the number was generated. In general for all sections, the first column
  does not need to be unique.
- The other two sections are examples for the submission of an elastic tensor
  and frequency-dependent dielectric constants (see below).

Running link:user_submission_test.py[`user_submission_test.py`] pretty-prints
the imported data using 'Pandas' defaults and outputs a JSON representation of
how the data would be saved in MP's database internally (->
link:output.json[`output.json`]).

Band Gaps
^^^^^^^^^

CSV Input
+++++++++

no special plot subsection due to single float column

Pandas Pretty-Print
+++++++++++++++++++

-------------
              name      type functional          method     value unit
0         band gap  indirect    GLLB-SC       Kohn-Sham  6.887038   eV
1         band gap    direct    GLLB-SC       Kohn-Sham  6.886986   eV
2         band gap  indirect    GLLB-SC  quasi-particle  9.315470   eV
3         band gap    direct    GLLB-SC  quasi-particle  9.315419   eV
4  deriv. discont.       NaN    GLLB-SC             NaN  2.428330   eV
-------------

JSON Representation
+++++++++++++++++++

-------------
{
  ...
  "Band Gaps": [
    {
      "functional": "GLLB-SC", 
      "method": "Kohn-Sham", 
      "name": "band gap", 
      "type": "indirect", 
      "unit": "eV", 
      "value": 6.887038
    }, 
    ...
  ], 
  ...
}
-------------

Plot
++++

image:png/fig1.png[width="400px"]

Elastic Tensor
^^^^^^^^^^^^^^

Pandas Pretty-Print
+++++++++++++++++++

----------------
                Experimental  Theoretical unit            reference
Matrix Element                                                     
c11                    287.0        284.7  GPa  PestkaScottLePage11
c22                    302.1        299.5  GPa                  NaN
c33                    266.1        248.1  GPa  PestkaScottLePage11
c44                    117.2        100.9  GPa                  NaN
c55                     80.2         81.5  GPa                  NaN
c66                     85.6         83.7  GPa                  NaN
c23                    122.0        122.7  GPa  PestkaScottLePage11
c12                    128.7        133.3  GPa                  NaN
c13                    116.3        115.4  GPa                  NaN
----------------

JSON Representation
+++++++++++++++++++

----------------
{
  ...
  "Elastic Tensor": {
    "Experimental": {
      "c11": 287.0, 
      "c12": 128.7, 
      ...
    }, 
    "Theoretical": {
      "c11": 284.7, 
      "c12": 133.3, 
      ...
    }, 
    "reference": {
      "c11": "PestkaScottLePage11", 
      "c12": null, 
      ...
    }, 
    "unit": {
      "c11": "GPa", 
      ...
    }
  }, 
  ...
}
----------------

Plot
++++

image:png/fig2.png[width="400px"]

Dielectric Constants
^^^^^^^^^^^^^^^^^^^^

CSV Input
+++++++++

no plot subsection -> overlay all y~i~ vs x in plot

Pandas Pretty-Print
+++++++++++++++++++

----------------
     freq    real    imag
0     0.0  2.0065  0.0000
1     0.5  2.0073  0.0000
2     1.0  2.0097  0.0000
3     1.5  2.0139  0.0000
4     2.0  2.0197  0.0000
5     2.5  2.0273  0.0000
6     3.0  2.0368  0.0000
...
----------------

JSON Representation
+++++++++++++++++++

----------------
{
  ...
  "Dielectric Constant": [
    [ 0.0, 2.0065, 0.0 ], 
    [ 0.5, 2.0073, 0.0 ], 
    [ 1.0, 2.0097, 0.0 ], 
    [ 1.5, 2.0139, 0.0 ], 
    [ 2.0, 2.0197, 0.0 ], 
    ...
  ], 
  ...
}
----------------

Plot
++++

image:png/fig3.png[width="400px"]

// vim: set syntax=asciidoc:
