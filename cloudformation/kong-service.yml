AWSTemplateFormatVersion: '2010-09-09'
Description: kong service
Parameters:
  EnvironmentName:
    Type: String
    Default: production
    Description: A name for the environment that this cloudformation will be part of.
                 Used to locate other resources in the same environment.
  ServiceName:
    Type: String
    Default: kong
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: nginx
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerCpu:
    Type: Number
    Default: 512
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 1024
    Description: How much memory in megabytes to give the container
  DBPassword:
    Type: String
    Default: change-me
    Description: password for the Postgres DB
    NoEcho: 'true'
    MinLength: '8'

Resources:
  # A log group for storing the container logs for this service
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [!Ref 'EnvironmentName', 'service', !Ref 'ServiceName']]

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'ECSTaskExecutionRole']]
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          Environment:
            - Name: REGION
              Value: !Ref 'AWS::Region'
            - Name: ENV_NAME
              Value: !Ref 'EnvironmentName'
            - Name: KONG_ADMIN_LISTEN
              Value: '0.0.0.0:8001'
            - Name: KONG_DATABASE
              Value: postgres
            - Name: KONG_PG_USER
              Value: kong
            - Name: KONG_PG_DATABASE
              Value: kong
            - Name: KONG_PLUGINS
              Value: oidc,oidc-consumer,key-auth
            - Name: KONG_PG_HOST
              Value:
                Fn::ImportValue:
                    !Join [':', [!Ref 'EnvironmentName', 'DBAddress']]
            - Name: KONG_PG_PORT
              Value: 5432
            - Name: KONG_PG_PASSWORD
              Value: !Ref 'DBPassword'
            - Name: KONG_LOG_LEVEL
              Value: info
            - Name: KONG_LUA_PACKAGE_PATH
              Value: '/usr/local/oidc/?.lua;;'
            - Name: KONG_ADMIN_ACCESS_LOG
              Value: '/dev/stdout'
            - Name: KONG_ADMIN_ERROR_LOG
              Value: '/dev/stderr'
            - Name: KONG_PROXY_ACCESS_LOG
              Value: '/dev/stdout'
            - Name: KONG_PROXY_ERROR_LOG
              Value: '/dev/stderr'
          PortMappings:
            - ContainerPort: 8000
            - ContainerPort: 8001
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Join ['-', [!Ref 'EnvironmentName', 'service', !Ref 'ServiceName']]
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'EnvironmentName', 'PublicSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'EnvironmentName', 'PublicSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'EnvironmentName', 'PublicSubnetTwo']]
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: 8000
          TargetGroupArn: !Ref 'NetworkLoadBalancerTargetGroup'

  NetworkLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckPort: 8001
      Port: 8000
      Protocol: TCP
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'VPCId']]

  NetworkLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NetworkLoadBalancerTargetGroup
      LoadBalancerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'NetworkLoadBalancer']]
      Port: 80
      Protocol: TCP
