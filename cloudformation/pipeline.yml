Parameters:
  GitHubRepo:
    Type: String
    Default: MPContribs
  GitHubBranch:
    Type: String
    Default: master
  GitHubToken:
    Type: String
    NoEcho: true
  GitHubUser:
    Type: String
    Default: materialsproject
  GitHubRepoKong:
    Type: String
    Default: kong-oidc-consumer
  GitHubBranchKong:
    Type: String
    Default: kong1.4
  GitHubUserKong:
    Type: String
    Default: tschaume
  GitHubRepoKonga:
    Type: String
    Default: konga
  GitHubBranchKonga:
    Type: String
    Default: mpcontribs
  GitHubUserKonga:
    Type: String
    Default: tschaume
  GitHubRepoMPWeb:
    Type: String
    Default: web
  GitHubBranchMPWeb:
    Type: String
    Default: release
  GitHubRepoMPWebApi:
    Type: String
    Default: api
  GitHubBranchMPWebApi:
    Type: String
    Default: release
  MongoHost:
    Type: String
    NoEcho: true
  PipelineName:
    Type: String
    Default: materialsproject
  EnvironmentName:
    Type: String
    Default: prod
  NetworkNumber:
    Type: String
    Default: '0'
    Description: number to control CIDR block for VPC (192.168.{NetworkNumber}.<256IPs>)
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '8'
  CertificateArn:
    Type: String
    Description: ARN of the Amazon Certificate Manager SSL certificate to use for this app
  KongaAdminUsername:
    Type: String
    MinLength: '5'
  KongaAdminEmail:
    Type: String
  KongaAdminFirstname:
    Type: String
  KongaAdminLastname:
    Type: String
  KongaAdminPassword:
    NoEcho: 'true'
    Type: String
  AwsAccessKeyId:
    NoEcho: 'true'
    Type: String
  AwsSecretAccessKey:
    NoEcho: 'true'
    Type: String
  SnsAdminTopicArn:
    Type: String
  ImageUrlChrome:
    Type: String
  MapiKey:
    NoEcho: 'true'
    Type: String
    Description: API key for MPRester to build formulae lookup table


Resources:
  # Create the ECR respository to hold built docker images
  Repository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain

  # A role used to give CodeBuild permission to access code,
  # build it, and upload the build results to ECR
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/EKSRole
                Effect: Allow
                Action:
                  - sts:AssumeRole
              - Resource: '*'
                Effect: Allow
                Action:
                  - eks:Describe*
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
              - Resource: '*'
                Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                  - ec2:CreateNetworkInterfacePermission

  # Role used to give CodePipeline to release a build.
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Allow codepipeline to put artifacts in the S3 bucket
              # as well as get artifacts back out of it.
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              # Allow codepipeline to build code builds
              # Allow codepipeline to deploy cloudformation stacks
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:CreateUploadBucket
                  - cloudformation:DeleteStack
                  - cloudformation:Describe*
                  - cloudformation:List*
                  - cloudformation:UpdateStack
                  - cloudformation:ValidateTemplate
                  - cloudformation:ExecuteChangeSet

  # CloudFormation deployment role. This role is passed by CodeBuild to
  # CloudFormation to use when setting up the application resources
  CloudFormationDeployRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: deploy-stack
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "iam:*"
                  - "ec2:*"
                  - "ecs:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "logs:*"
                  - "application-autoscaling:*"
                  - "cloudwatch:*"
                  - "route53:*"
                  - "rds:*"
                  - "kms:*"
                  - "eks:*"
                  - "elasticache:*"
                Resource: "*"

  # While the build is in progress we need a place to store artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  # This is the definition of how to build the code in the repository
  CodeBuildProjectKong:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                docker: 18
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - IMAGE_URI="${REPOSITORY_URI}:${PREFIX}-${TAG}"
            build:
              commands:
                - docker build --tag "${IMAGE_URI}-kong" .
            post_build:
              commands:
                - docker push "${IMAGE_URI}-kong"
                - printf '{"ImageUri":"%s"}' "${IMAGE_URI}-kong" > build-kong.json
          artifacts:
            files:
                - build-kong.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: PREFIX
            Value: !Sub ${PipelineName}-${EnvironmentName}
      Cache:
        Type: LOCAL
        Modes: # You can specify one or more cache mode,
          - LOCAL_CUSTOM_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
          - LOCAL_SOURCE_CACHE
      Name: !Sub ${AWS::StackName}-kong
      ServiceRole: !Ref CodeBuildServiceRole

  CodeBuildProjectKonga:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                docker: 18
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - IMAGE_URI="${REPOSITORY_URI}:${PREFIX}-${TAG}"
            build:
              commands:
                - docker build --tag "${IMAGE_URI}-konga" .
            post_build:
              commands:
                - docker push "${IMAGE_URI}-konga"
                - printf '{"ImageUri":"%s"}' "${IMAGE_URI}-konga" > build-konga.json
          artifacts:
            files:
                - build-konga.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: PREFIX
            Value: !Sub ${PipelineName}-${EnvironmentName}
      Cache:
        Type: LOCAL
        Modes: # You can specify one or more cache mode,
          - LOCAL_CUSTOM_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
          - LOCAL_SOURCE_CACHE
      Name: !Sub ${AWS::StackName}-konga
      ServiceRole: !Ref CodeBuildServiceRole

  CodeBuildProjectApi:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                docker: 18
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - IMAGE_URI="${REPOSITORY_URI}:${PREFIX}-${TAG}"
            build:
              commands:
                - docker build --tag "${IMAGE_URI}-api" --build-arg MAPI_KEY=${MAPI_KEY} mpcontribs-api
            post_build:
              commands:
                - docker push "${IMAGE_URI}-api"
                - printf '{"ImageUri":"%s"}' "${IMAGE_URI}-api" > build-api.json
          artifacts:
            files:
                - build-api.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: MAPI_KEY
            Value: !Ref 'MapiKey'
          - Name: PREFIX
            Value: !Sub ${PipelineName}-${EnvironmentName}
      Cache:
        Type: LOCAL
        Modes: # You can specify one or more cache mode,
          - LOCAL_CUSTOM_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
          - LOCAL_SOURCE_CACHE
      Name: !Sub ${AWS::StackName}-api
      ServiceRole: !Ref CodeBuildServiceRole

  CodeBuildProjectPortal:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                docker: 18
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - IMAGE_URI="${REPOSITORY_URI}:${PREFIX}-${TAG}"
            build:
              commands:
                - docker build --tag "${IMAGE_URI}-portal" -f mpcontribs-portal/Dockerfile .
            post_build:
              commands:
                - docker push "${IMAGE_URI}-portal"
                - printf '{"ImageUri":"%s"}' "${IMAGE_URI}-portal" > build-portal.json
          artifacts:
            files:
                - build-portal.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: PREFIX
            Value: !Sub ${PipelineName}-${EnvironmentName}
      Cache:
        Type: LOCAL
        Modes: # You can specify one or more cache mode,
          - LOCAL_CUSTOM_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
          - LOCAL_SOURCE_CACHE
      Name: !Sub ${AWS::StackName}-portal
      ServiceRole: !Ref CodeBuildServiceRole

  CodeBuildProjectGateway:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                docker: 18
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - IMAGE_URI="${REPOSITORY_URI}:${PREFIX}-${TAG}"
            build:
              commands:
                - docker build --tag "${IMAGE_URI}-gateway" -f binder/DockerfileKernelGateway .
            post_build:
              commands:
                - docker push "${IMAGE_URI}-gateway"
                - printf '{"ImageUri":"%s"}' "${IMAGE_URI}-gateway" > build-gateway.json
          artifacts:
            files:
                - build-gateway.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: PREFIX
            Value: !Sub ${PipelineName}-${EnvironmentName}
      Cache:
        Type: LOCAL
        Modes: # You can specify one or more cache mode,
          - LOCAL_CUSTOM_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
          - LOCAL_SOURCE_CACHE
      Name: !Sub ${AWS::StackName}-gateway
      ServiceRole: !Ref CodeBuildServiceRole

  CodeBuildProjectR2d:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                docker: 18
                python: 3.7
              commands:
                - pip install -U jupyter-repo2docker
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - IMAGE_URI="${REPOSITORY_URI}:${PREFIX}-${TAG}"
            build:
              commands:
                - jupyter-repo2docker --user-name jovyan --user-id 1000 --image-name "${IMAGE_URI}-r2d" --no-run .
            post_build:
              commands:
                - docker push "${IMAGE_URI}-r2d"
                - printf '{"ImageUri":"%s"}' "${IMAGE_URI}-r2d" > build-r2d.json
          artifacts:
            files:
                - build-r2d.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: EKS_CLUSTER_NAME
            Value: JhubCluster
          - Name: EKS_KUBECTL_ROLE_ARN # TODO user/Administrator ??
            Value: !Sub arn:aws:iam::${AWS::AccountId}:role/EKSRole
          - Name: PREFIX
            Value: !Sub ${PipelineName}-${EnvironmentName}
      Cache:
        Type: LOCAL
        Modes: # You can specify one or more cache mode,
          - LOCAL_CUSTOM_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
          - LOCAL_SOURCE_CACHE
      Name: !Sub ${AWS::StackName}-r2d
      ServiceRole: !Ref CodeBuildServiceRole

  CodeBuildProjectMPWeb:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            parameter-store:
              build_ssh_key: "build_ssh_key"
          phases:
            install:
              runtime-versions:
                docker: 18
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - IMAGE_URI="${REPOSITORY_URI}:${PREFIX}-${TAG}"
                - mkdir -p ~/.ssh
                - echo "$build_ssh_key" > ~/.ssh/id_rsa
                - chmod 600 ~/.ssh/id_rsa
                #- eval "$(ssh-agent -s)"
                #- ssh-add ~/.ssh/id_rsa
                - ssh-keygen -F github.com || ssh-keyscan github.com >> ~/.ssh/known_hosts
                - git config --global url."git@github.com:".insteadOf "https://github.com/"
                - git init
                - git remote add origin git@github.com:materialsproject/web.git
                - git fetch
                - git checkout -tf origin/release
                - git submodule init
                - git submodule update --recursive  # TODO check api branch
            build:
              commands:
                - docker build --tag "${IMAGE_URI}-mpweb" .
            post_build:
              commands:
                - docker push "${IMAGE_URI}-mpweb"
                - printf '{"ImageUri":"%s"}' "${IMAGE_URI}-mpweb" > build-mpweb.json
          artifacts:
            files:
                - build-mpweb.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: PREFIX
            Value: !Sub ${PipelineName}-${EnvironmentName}
      Cache:
        Type: LOCAL
        Modes: # You can specify one or more cache mode,
          - LOCAL_CUSTOM_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
          - LOCAL_SOURCE_CACHE
      Name: !Sub ${AWS::StackName}-mpweb
      ServiceRole: !Ref CodeBuildServiceRole

  CodeBuildProjectMPWebApi:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                docker: 18
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - IMAGE_URI="${REPOSITORY_URI}:${PREFIX}-${TAG}"
            build:
              commands:
                - docker build --tag "${IMAGE_URI}-mpwebapi" .
            post_build:
              commands:
                - docker push "${IMAGE_URI}-mpwebapi"
                - printf '{"ImageUri":"%s"}' "${IMAGE_URI}-mpwebapi" > build-mpwebapi.json
          artifacts:
            files:
                - build-mpwebapi.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: PREFIX
            Value: !Sub ${PipelineName}-${EnvironmentName}
      Cache:
        Type: LOCAL
        Modes: # You can specify one or more cache mode,
          - LOCAL_CUSTOM_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
          - LOCAL_SOURCE_CACHE
      Name: !Sub ${AWS::StackName}-mpwebapi
      ServiceRole: !Ref CodeBuildServiceRole


  # This pipeline defines the steps to build, deploy, and release the application
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${PipelineName}-${EnvironmentName}
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:

        # First we have to pull the source code from the Github repository.
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: Source
            - Name: MPWeb
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepoMPWeb
                Branch: !Ref GitHubBranchMPWeb
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceMPWeb
            - Name: MPWebApi
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepoMPWebApi
                Branch: !Ref GitHubBranchMPWebApi
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceMPWebApi
            - Name: Kong
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUserKong
                Repo: !Ref GitHubRepoKong
                Branch: !Ref GitHubBranchKong
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceKong
            - Name: Konga
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUserKonga
                Repo: !Ref GitHubRepoKonga
                Branch: !Ref GitHubBranchKonga
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceKonga

        # Now we deploy the base resources: the cluster and VPC itself.
        - Name: BaseResources
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub ${PipelineName}-${EnvironmentName}-BaseResources
                TemplatePath: Source::cloudformation/cluster.yml
                Capabilities: CAPABILITY_IAM
                ParameterOverrides: !Sub |
                  {
                    "PipelineName": "${PipelineName}",
                    "EnvironmentName": "${EnvironmentName}",
                    "NetworkNumber": "${NetworkNumber}",
                    "DBPassword": "${DBPassword}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BaseResources

        - Name: AppResources
          Actions:
            - Name: BuildKong
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProjectKong
                PrimarySource: SourceKong
              InputArtifacts:
                - Name: SourceKong
              OutputArtifacts:
                - Name: BuildOutputKong
            - Name: BuildKonga
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProjectKonga
                PrimarySource: SourceKonga
              InputArtifacts:
                - Name: SourceKonga
              OutputArtifacts:
                - Name: BuildOutputKonga
            - Name: BuildGateway
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProjectGateway
                PrimarySource: Source
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BuildOutputGateway
            - Name: BuildApi
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProjectApi
                PrimarySource: Source
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BuildOutputApi
            - Name: BuildPortal
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProjectPortal
                PrimarySource: Source
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BuildOutputPortal
            - Name: BuildMPWeb
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProjectMPWeb
                PrimarySource: SourceMPWeb
              InputArtifacts:
                - Name: SourceMPWeb
              OutputArtifacts:
                - Name: BuildOutputMPWeb
            - Name: BuildMPWebApi
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProjectMPWebApi
                PrimarySource: SourceMPWebApi
              InputArtifacts:
                - Name: SourceMPWebApi
              OutputArtifacts:
                - Name: BuildOutputMPWebApi
            #- Name: BuildR2d
            #  ActionTypeId:
            #    Category: Build
            #    Owner: AWS
            #    Version: 1
            #    Provider: CodeBuild
            #  Configuration:
            #    ProjectName: !Ref CodeBuildProjectR2d
            #    PrimarySource: Source
            #  InputArtifacts:
            #    - Name: Source
            #  OutputArtifacts:
            #    - Name: BuildOutputR2d

        - Name: Deploy
          Actions:
            - Name: DeployKong
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub ${PipelineName}-${EnvironmentName}-KongService
                TemplatePath: Source::cloudformation/kong-service.yml
                Capabilities: CAPABILITY_IAM
                ParameterOverrides: !Sub |
                  {
                    "PipelineName": "${PipelineName}",
                    "EnvironmentName": "${EnvironmentName}",
                    "DBPassword": "${DBPassword}",
                    "CertificateArn": "${CertificateArn}",
                    "ImageUrlKong": {
                      "Fn::GetParam" : ["BuildOutputKong", "build-kong.json", "ImageUri"]
                    },
                    "ImageUrlKonga": {
                      "Fn::GetParam" : ["BuildOutputKonga", "build-konga.json", "ImageUri"]
                    },
                    "KongaAdminUsername": "${KongaAdminUsername}",
                    "KongaAdminEmail": "${KongaAdminEmail}",
                    "KongaAdminFirstname": "${KongaAdminFirstname}",
                    "KongaAdminLastname": "${KongaAdminLastname}",
                    "KongaAdminPassword": "${KongaAdminPassword}"
                  }
              InputArtifacts:
                - Name: Source
                - Name: BaseResources
                - Name: BuildOutputKong
                - Name: BuildOutputKonga
              RunOrder: 1

            - Name: DeployApp
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub ${PipelineName}-${EnvironmentName}-AppService
                TemplatePath: Source::cloudformation/service.yml
                Capabilities: CAPABILITY_IAM
                ParameterOverrides: !Sub |
                  {
                    "PipelineName": "${PipelineName}",
                    "EnvironmentName": "${EnvironmentName}",
                    "MongoHost": "${MongoHost}",
                    "AwsAccessKeyId": "${AwsAccessKeyId}",
                    "AwsSecretAccessKey": "${AwsSecretAccessKey}",
                    "SnsAdminTopicArn": "${SnsAdminTopicArn}",
                    "ImageUrlChrome": "${ImageUrlChrome}",
                    "ApiCname": "api.mpcontribs.org",
                    "ApiPort": "5000",
                    "MpcontribsDbName": "mpcontribs-dev",
                    "PortalCname": "portal.mpcontribs.org",
                    "PortalPort": "8080",
                    "ImageUrlApi": {
                      "Fn::GetParam" : ["BuildOutputApi", "build-api.json", "ImageUri"]
                    },
                    "ImageUrlPortal": {
                      "Fn::GetParam" : ["BuildOutputPortal", "build-portal.json", "ImageUri"]
                    },
                    "ImageUrlGateway": {
                      "Fn::GetParam" : ["BuildOutputGateway", "build-gateway.json", "ImageUri"]
                    }
                  }
              InputArtifacts:
                - Name: Source
                - Name: BuildOutputApi
                - Name: BuildOutputPortal
                - Name: BuildOutputGateway
              RunOrder: 2

            - Name: DeployAppML
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub ${PipelineName}-${EnvironmentName}-AppMlService
                TemplatePath: Source::cloudformation/service.yml
                Capabilities: CAPABILITY_IAM
                ParameterOverrides: !Sub |
                  {
                    "PipelineName": "${PipelineName}",
                    "EnvironmentName": "${EnvironmentName}",
                    "MongoHost": "${MongoHost}",
                    "AwsAccessKeyId": "${AwsAccessKeyId}",
                    "AwsSecretAccessKey": "${AwsSecretAccessKey}",
                    "SnsAdminTopicArn": "${SnsAdminTopicArn}",
                    "ImageUrlChrome": "${ImageUrlChrome}",
                    "ApiCname": "ml-api.materialsproject.cloud",
                    "ApiPort": "5002",
                    "MpcontribsDbName": "mpcontribs-ml",
                    "PortalCname": "ml.materialsproject.cloud",
                    "PortalPort": "8082",
                    "ImageUrlApi": {
                      "Fn::GetParam" : ["BuildOutputApi", "build-api.json", "ImageUri"]
                    },
                    "ImageUrlPortal": {
                      "Fn::GetParam" : ["BuildOutputPortal", "build-portal.json", "ImageUri"]
                    },
                    "ImageUrlGateway": {
                      "Fn::GetParam" : ["BuildOutputGateway", "build-gateway.json", "ImageUri"]
                    }
                  }
              InputArtifacts:
                - Name: Source
                - Name: BuildOutputApi
                - Name: BuildOutputPortal
                - Name: BuildOutputGateway
              RunOrder: 2

            - Name: DeployMPWeb
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub ${PipelineName}-${EnvironmentName}-MpWebService
                TemplatePath: Source::cloudformation/mpweb-service.yml
                Capabilities: CAPABILITY_IAM
                ParameterOverrides: !Sub |
                  {
                    "PipelineName": "${PipelineName}",
                    "EnvironmentName": "${EnvironmentName}",
                    "MongoHost": "${MongoHost}",
                    "ImageUrlWeb": { "Fn::GetParam" : ["BuildOutputMPWeb", "build-mpweb.json", "ImageUri"] },
                    "ImageUrlWebApi": { "Fn::GetParam" : ["BuildOutputMPWebApi", "build-mpwebapi.json", "ImageUri"] }
                  }
              InputArtifacts:
                - Name: Source
                - Name: BuildOutputMPWeb
                - Name: BuildOutputMPWebApi
              RunOrder: 2

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
